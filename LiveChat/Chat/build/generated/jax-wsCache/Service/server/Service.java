
package server;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Service", targetNamespace = "http://server/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Service {


    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "signout", targetNamespace = "http://server/", className = "server.Signout")
    @ResponseWrapper(localName = "signoutResponse", targetNamespace = "http://server/", className = "server.SignoutResponse")
    @Action(input = "http://server/Service/signoutRequest", output = "http://server/Service/signoutResponse")
    public boolean signout(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "broadcast", targetNamespace = "http://server/", className = "server.Broadcast")
    @ResponseWrapper(localName = "broadcastResponse", targetNamespace = "http://server/", className = "server.BroadcastResponse")
    @Action(input = "http://server/Service/broadcastRequest", output = "http://server/Service/broadcastResponse")
    public boolean broadcast(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3);

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "receive", targetNamespace = "http://server/", className = "server.Receive")
    @ResponseWrapper(localName = "receiveResponse", targetNamespace = "http://server/", className = "server.ReceiveResponse")
    @Action(input = "http://server/Service/receiveRequest", output = "http://server/Service/receiveResponse")
    public List<String> receive();

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "setthreadUserList", targetNamespace = "http://server/", className = "server.SetthreadUserList")
    @ResponseWrapper(localName = "setthreadUserListResponse", targetNamespace = "http://server/", className = "server.SetthreadUserListResponse")
    @Action(input = "http://server/Service/setthreadUserListRequest", output = "http://server/Service/setthreadUserListResponse")
    public boolean setthreadUserList(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "newthread", targetNamespace = "http://server/", className = "server.Newthread")
    @ResponseWrapper(localName = "newthreadResponse", targetNamespace = "http://server/", className = "server.NewthreadResponse")
    @Action(input = "http://server/Service/newthreadRequest", output = "http://server/Service/newthreadResponse")
    public boolean newthread(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2);

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getthreadList", targetNamespace = "http://server/", className = "server.GetthreadList")
    @ResponseWrapper(localName = "getthreadListResponse", targetNamespace = "http://server/", className = "server.GetthreadListResponse")
    @Action(input = "http://server/Service/getthreadListRequest", output = "http://server/Service/getthreadListResponse")
    public List<String> getthreadList();

    /**
     * 
     * @param name
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "hello", targetNamespace = "http://server/", className = "server.Hello")
    @ResponseWrapper(localName = "helloResponse", targetNamespace = "http://server/", className = "server.HelloResponse")
    @Action(input = "http://server/Service/helloRequest", output = "http://server/Service/helloResponse")
    public String hello(
        @WebParam(name = "name", targetNamespace = "")
        String name);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "login", targetNamespace = "http://server/", className = "server.Login")
    @ResponseWrapper(localName = "loginResponse", targetNamespace = "http://server/", className = "server.LoginResponse")
    @Action(input = "http://server/Service/loginRequest", output = "http://server/Service/loginResponse")
    public boolean login(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "register", targetNamespace = "http://server/", className = "server.Register")
    @ResponseWrapper(localName = "registerResponse", targetNamespace = "http://server/", className = "server.RegisterResponse")
    @Action(input = "http://server/Service/registerRequest", output = "http://server/Service/registerResponse")
    public boolean register(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "editthread", targetNamespace = "http://server/", className = "server.Editthread")
    @ResponseWrapper(localName = "editthreadResponse", targetNamespace = "http://server/", className = "server.EditthreadResponse")
    @Action(input = "http://server/Service/editthreadRequest", output = "http://server/Service/editthreadResponse")
    public boolean editthread(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2);

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getActivelist", targetNamespace = "http://server/", className = "server.GetActivelist")
    @ResponseWrapper(localName = "getActivelistResponse", targetNamespace = "http://server/", className = "server.GetActivelistResponse")
    @Action(input = "http://server/Service/getActivelistRequest", output = "http://server/Service/getActivelistResponse")
    public List<String> getActivelist();

}
